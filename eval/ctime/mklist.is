let [0] Unit = ![0] #1;
let tt : Unit = @[0] 0_1;

let [0] List : |n : Nat| -> * c1 rptr
= |n| n :: |_| * c1 rptr {
		| 0        -> Box Unit
		| suc @n.T -> Box (T & Nat)
	};

def [*] lower : Nat -> 'Nat = |n| n :: |_| 'Nat {
		| 0        -> <0>
		| suc @_.x -> <suc <x>>
	};

def [0] Curry : Nat -> '(* c1 rptr) -> '(* c1 rfun) = 
	|n| |T| n :: |_| '(* c1 rfun) {
		| 0        -> <Unit -> <T>>
		| suc @_.F -> <Nat -> <F>>
	};

def [*] Curry_map : |n : Nat| -> |A : '(* c1 rptr)| @ -> |B : '(* c1 rptr)| @ -> ('<A> -> '<B>) -> '<Curry n A> -> '<Curry n B> =
	|n| |A| |B| |f| 
	n :: |n| '<Curry n A> -> '<Curry n B> {
		| 0        -> |g| <|x| <f <<g> x>>>
		| suc @_.k -> |g| <|x| <k <<g> x>>>
	};

def [*] make_list : |n : Nat| -> '<Curry n <List <lower n>>> = 
	|n| n :: |n| '<Curry n <List <lower n>>> {
		| 0        -> <|x| box x>
		| suc @n.a -> <|x| <Curry_map n 
			<List <lower n>>
			<List (suc <lower n>)>
			(|list| <box (<list>, x)>) 
			a
		>>
	};

@[0] 0_1
