def [0] sym : |c : copy| -> |r : repr|
-> '(|A : * c r| -> |x : A| -> |y : A| -> Id A x y -> Id A y x)
= |_| |_| <
	|A| |x| |_| |p| p :: |v.w| Id A v x {
		| refl -> refl
	}
>;

def [0] trans
: |c : copy| -> |r : repr|
-> '(|A : * c r| -> |x : A| -> |y : A| -> |z : A| ->  Id A x y -> Id A y z -> Id A x z)
= |_| |_| <
	|A| |x| |y| |_| |p| |q| q :: |v.w| Id A x v {
		| refl -> p
	}
>;

def tr
: |c_0 : copy| @ -> |r_0 : repr| @ -> |c_1 : copy| @ -> |r_1 : repr|
@ -> '(
	|B : * c_0 r_0| @ -> |F : B -> * c_1 r_1| @ -> |x : B| @ -> |y : B| @ -> Id B x y @ -> F x -> F y
) = |_| |_| |_| |_| <
	|_| |F| |_| |_| |p| |a| p cast :: |v._| F v {
		refl -> a
	}
>;

def [0] is_prop
: |c : copy| -> |r : repr| -> '(|T : * c r| -> * c1 rfun)
= |c| |r| <|T| |x : T| -> |y : T| -> Id T x y>;

let [0] one_is_prop
: <is_prop c0 rbyte> #1
= |x| x :: |x| |y : #1| -> Id #1 x y {
	0_1 -> |y| y :: |y| Id #1 0_1 y {
		0_1 -> refl
	}
};

let [0] bool_family : #2 -> * c0 rbyte = |b| b :: |_| * c0 rbyte { false -> #0 | true -> #1 };

let [0] bool_no_confusion : Id #2 false true -> #0 = |p|
	<tr c0 rbyte c0 rbyte> #2 bool_family true false (<sym c0 rbyte> #2 false true p) 0_1;

<tr c0 rbyte c0 rbyte> #2 bool_family true true refl 0_1
