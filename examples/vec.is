def unit : copy -> '* c1
	= |c| [|A : * c| -> A -> A];

let tt : [unit c0]
	= |A| |a| a;

def bitvec : nat -> '* c1
	= |n| n :: |n| '* c1 {
		| 0       -> unit c0
		| suc n T -> [bool & [T]]
	};

def not : bool -> bool
	= |b| b :: bool |b| bool {
		| false -> true
		| true  -> false
	};

def lower : bool -> 'bool
	= |b| b :: bool |b| 'bool {
		| false -> [false]
		| true  -> [true]
	};

def is_even : nat -> bool
	= |n| n :: |n| bool {
		| 0       -> true
		| suc n x -> not x
	};

def pred : nat -> nat
	= |n| n :: |n| nat {
		| 0       -> 0
		| suc n x -> n
	};

def make_bitvec : |n : nat| -> '[bitvec n]
	= |n| n :: |n| nat & '[bitvec n] {
		| 0       -> pred n, [tt]
		| suc n v -> pred (v/.), [[lower (is_even (v/.))], [v/!]]
	}/!;

[make_bitvec 8]
