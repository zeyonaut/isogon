let! add : nat -> nat -> nat
	= |a| |b| a :: |_| nat {
		| 0        -> b
		| suc @_.k -> suc k
	};

let! fib2 : nat -> (nat & nat) -> (nat & nat)
	= |n| |x| n :: |_| (nat & nat) {
		| 0        -> x
		| suc @_.x -> add (x/.) (x/!), x/.
	};

let fib : nat -> nat
	= |n| fib2 n (0, 1)/.;

fib 14
