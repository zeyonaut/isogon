#fragment 0

% This file contains an adaptation of Hurken's paradox, as described in:
% https://www.cs.cmu.edu/%7Ekw/scans/hurkens95tlca.pdf
% http://rutgerkuyper.com/pubs/bachelor.pdf
% Some non-standard phrases are introduced to make the paradox easier to understand.

% This causes elaboration to fail to terminate.

% The reason for nontermination is the validity of Type : Type.
def Type
	= * c0;

% We define negation with #0, but it doesn't actually matter what codomain we choose!
def not
	: Type -> Type
	= |T| T -> #0;

% We also define notions of powersets (containing subsets) and double powersets (containing subpowersets).
def P
	: Type -> Type
	= |T| T -> Type;

def PP
	: Type -> Type
	= |T| P (P T);

% Consider a powerful universe (U, s, t) of 'ordinals' (by analogy to the Burali-Forti paradox).
% An ordinal in U, for any type T, assigns to each 'reflection' of T a subpowerset of T.
def U
	= |T : Type| -> (PP T -> T) -> PP T;

% We can conceptualize t as a reflection of U:
% (This is probably the most confusing part of the paradox.)
def t
	: PP U -> U
	% If V is a U-subpowerset, T is a type, r is a T-reflection, and X is a T-subset,
	% return the proposition V assigns to the U-subset of ordinals x such that
	% the T-reflection of [the T-subpowerset that x assigns to r] is an element of X.
	= |V| |T| |r| |X| V (|x| X (r (x T r)));
	
% We can conceptualize s as an 'unreflection' of U:
def s
	: U -> PP U
	% If x is an ordinal, return the U-subpowerset that x assigns to t.
	= |x| x U t;

% For convenience, we define the composition of t after s:
def ts
	: U -> U
	= |x| t (s x);

% We also define a means of pulling back a subset X of U by an endofunction f to get a subset f* X:
def pullback
	: (U -> U) -> P U -> P U
	= |f| |X| |x| X (f x);

% If x and y are ordinals and X is a subset of U, we say that x 'locally follows' y at X
% (for lack of a better phrase) iff:
% if sx contains X, then X contains y.
def locally_follows_at
	: U -> U -> PP U
	= |x| |y| |X| s x X -> X y;

% If x and y are ordinals of U, we say that x follows y (i.e., x > y) iff:
% for all subsets X of U, x locally follows y at X.
def follows
	: U -> P U
	= |x| |y| |X : P U| -> locally_follows_at x y X;

% If X is a subset of U, we say that X is 'inductive' iff:
% for all ordinals x of U, x locally follows x at X.
def is_inductive
	: PP U
	= |X| |x : U| -> locally_follows_at x x X;

% If x is an ordinal of U, we say that x is 'decent' (a.k.a. 'well-founded') iff:
% for all subsets X of U, if X is inductive, then X contains x.
def is_decent
	: P U
	= |x| |X : P U| -> is_inductive X -> X x;

% This is definitionally the same as being 'locally dubious' at every subset:
def is_locally_dubious
	: U -> PP U
	= |x| |X| locally_follows_at x (ts x) X;

% If x is an ordinal of U, we say that x is 'dubious'
% (for lack of a better phrase) iff:
% x follows tsx.
def is_dubious
	: P U
	= |x| follows x (ts x);

% If x is an ordinal of U, if x is dubious (i.e., x > tsx), then so is tsx (i.e., tsx > tstsx):
def proof_dubious_implies_dubious_ts
	: |x : U| -> is_dubious x -> is_dubious (ts x)
	= |x| |proof_x_is_dubious| (|X| proof_x_is_dubious (pullback ts X));

% We also define a subset ND of 'nondubious' ordinals (i.e., containing x for which x !> tsx):
def is_nondubious
	: P U
	= |x| not (is_dubious x);

def ND = is_nondubious;
	
% We can show that the subset of nondubious ordinals is inductive:
def proof_ND_is_inductive
	: is_inductive ND
	= |x| |proof_sx_contains_ND| (
		% Suppose x is an ordinal of U such that sx contains ND. We wish to show that x is nondubious.
		|proof_x_is_dubious| ( % Suppose x is dubious.
			% We can show that tsx is nondubious (i.e., tsx !> tstsx):
			def proof_tsx_is_nondubious
				: is_nondubious (ts x)
				= proof_x_is_dubious ND proof_sx_contains_ND;

			% However, since x is dubious, tsx is also dubious (i.e., tsx > tstsx), yielding a contradiction:
			proof_tsx_is_nondubious (proof_dubious_implies_dubious_ts x proof_x_is_dubious)
		)
	);
	
% We define the paradoxical subset O by the following:
def O
	: U
	= t is_inductive;

% Next, we show that O is decent:
def proof_O_is_decent
	: is_decent O
	= |X| |proof_X_is_inductive| ( % Suppose X is an inductive subset of U. We wish to show X contains O.
		% First, we show that sO contains X:
		def proof_sO_contains_X
			: s O X
			= |x| proof_X_is_inductive (ts x);

		% Since X is inductive, then X contains O, as required:
		proof_X_is_inductive O proof_sO_contains_X
	);

% Decency implies that O is dubious (i.e., O > ts O):
def proof_O_is_dubious
	: is_dubious O
	= |X| proof_O_is_decent (pullback ts X);

% However, since nondubiosity is inductive, O is also nondubious (i.e., O !> ts O):
def proof_O_is_nondubious
	: is_nondubious O
	= proof_O_is_decent ND proof_ND_is_inductive;

% This yields a contradiction, which fails to terminate.
<proof_O_is_nondubious proof_O_is_dubious :: |_| '#0 {}>
